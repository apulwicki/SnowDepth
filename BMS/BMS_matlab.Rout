
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## Work on ##
> #image(attG2) and for G13 not working...
> 
> 
> ################# Import Data ###############################
> #install.packages(...)
> 
> library(BMS)
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> 
> #T = readMat('/home/glaciology1/Documents/Data/SnowDepth/BMS/mat2R.mat')
> importG = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/BMS/mat2R.mat')
> 
> #Glacier data
>     params = attr(importG$topoG, "dimnames")[[1]]
>     params = c("swe",params)
>     aspect = importG$topoG[1]
>     elevation = importG$topoG[2]
>     northness = importG$topoG[3]
>     profileCurve = importG$topoG[4]
>     slope = importG$topoG[5]
>     tangentCurve = importG$topoG[6]
>     Sx = importG$topoG[7]
>     centreD = importG$topoG[8]
> G = data.frame(importG$sweG, aspect, elevation, northness, profileCurve, slope, tangentCurve, Sx, centreD)
> colnames(G) = params
> 
> rm(aspect, elevation, northness, profileCurve, slope, tangentCurve, Sx, centreD,params,importG)
>   
> 
> ####### Glacier BMS ##########
>   
>     ##uniform prior model
>       #mprior is uniform model prior, used UPI
>       attG = bms(G, mprior = "uniform", user.int = F)
>           #get coefficients
>         GC_uni = coef(attG,order.by.pip = F,include.constant = T)
>     
>     ##binomial prior model
>     att_fixedG = bms(G, mprior = "fixed", mprior.size = 2, user.int = T)
                    PIP     Post Mean      Post SD Cond.Pos.Sign Idx
elevation    1.00000000  6.899225e-04 4.523712e-05             1   2
centreD      0.99898639  1.066849e-04 2.260189e-05             1   8
northness    0.97417279  2.597414e-01 7.902153e-02             1   3
slope        0.18019542 -5.393053e-04 1.267211e-03             0   5
tangentCurve 0.06083106 -2.810458e-01 1.273400e+00             0   6
profileCurve 0.03760489 -1.516177e-01 9.267823e-01             0   4
aspect       0.02200904  7.593890e-07 6.950554e-06             1   1
Sx           0.01596809 -2.060769e-05 2.795097e-04             0   7

Mean no. regressors               Draws             Burnins                Time 
           "3.2898"               "256"                 "0"   "0.08683896 secs" 
 No. models visited      Modelspace 2^K           % visited         % Topmodels 
              "256"               "256"               "100"               "100" 
           Corr PMP            No. Obs.         Model Prior             g-Prior 
               "NA"               "705"         "fixed / 2"               "UIP" 
    Shrinkage-Stats 
        "Av=0.9986" 

Time difference of 0.08683896 secs
>         GC_fix = coef(att_fixedG, order.by.pip = F, include.constant = T)
>     
>     ##variable prior model (test how important 'complaints' is)
>     att_pipG = bms(G, mprior = "pip", mprior.size = c(0.01, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5), user.int = F)
>         GC_vari = coef(att_pipG,order.by.pip = F, include.constant = T)
>     
>     ##beta-binomial model priors = default BMS
>     att_randomG = bms(G, mprior = "random", mprior.size = 3, user.int = F) #equivalent att_random = bms(G)
>         GC_rand = coef(att_randomG, order.by.pip = F, include.constant = T)
>     
>     ##MCMC sampling
>     #att_mcmcG = bms(G, burn = 50000, iter = 1e+05, g = "BRIC", mprior = "uniform", nmodel = 2000, mcmc = "bd", user.int = F)
>     #    GC_mcmc = coef(att_mcmcG,order.by.pip = F,include.constant = T)
> 
>     ###return coeffs as structure
>     #Gcoeffs = data.frame(GC_uni, GC_fix, GC_rand, GC_vari, GC_mcmc)
>     Gcoeffs = data.frame(GC_uni, GC_fix, GC_rand, GC_vari)
> 
> ###### Saving to matlab file  
>   writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/BMS/R2mat.mat',Gcoeffs=Gcoeffs,
+            fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
> 
> proc.time()
   user  system elapsed 
  2.617   0.114   2.865 
