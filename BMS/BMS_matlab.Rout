
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> ################# Import Data ###############################
> #install.packages(...)
> 
> library(BMS)
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> 
> importG = readMat('/home/glaciology1/Documents/Data/SnowDepth/BMS/mat2R.mat')
> #importG = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/BMS/mat2R.mat')
> 
> #Glacier data
>     params = attr(importG$topoG, "dimnames")[[1]]
>     params = c("swe",params)
>     elevation = importG$topoG[1]
>     centreD = importG$topoG[2]
>     aspect = importG$topoG[3]
>     slope = importG$topoG[4]
>     northness = importG$topoG[5]
>     curvature = importG$topoG[6]
>     Sx = importG$topoG[7]
> G = data.frame(importG$sweG,  elevation, centreD, aspect, slope, northness, curvature, Sx)
> colnames(G) = params
> 
> rm(aspect, elevation, northness, curvature, slope, Sx, centreD, params, importG)
>   
> 
> ####### Glacier BMS ##########
>   
>     ##uniform prior model
>       #mprior is uniform model prior, used UPI
>       attG = bms(G, mprior = "uniform", user.int = F)
>           #get coefficients
>         GC_uni = coef(attG,order.by.pip = F,include.constant = T)
>     
>     ##binomial prior model
> #    att_fixedG = bms(G, mprior = "fixed", mprior.size = 2, user.int = T)
> #        GC_fix = coef(att_fixedG, order.by.pip = F, include.constant = T)
>     
>     ##variable prior model (test how important 'complaints' is)
> #    att_pipG = bms(G, mprior = "pip", mprior.size = c(0.01, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5), user.int = F)
> #        GC_vari = coef(att_pipG,order.by.pip = F, include.constant = T)
>     
>     ##beta-binomial model priors = default BMS
> #    att_randomG = bms(G, mprior = "random", mprior.size = 3, user.int = F) #equivalent att_random = bms(G)
> #        GC_rand = coef(att_randomG, order.by.pip = F, include.constant = T)
>     
>     ##MCMC sampling
> #    att_mcmcG = bms(G, burn = 50000, iter = 1e+05, g = "BRIC", mprior = "uniform", nmodel = 2000, mcmc = "bd", user.int = F)
> #        GC_mcmc = coef(att_mcmcG,order.by.pip = F,include.constant = T)
> 
>     ###return coeffs as structure
> #    Gcoeffs = data.frame(GC_uni, GC_fix, GC_rand, GC_vari, GC_mcmc)
> #    Gcoeffs = data.frame(GC_uni, GC_fix, GC_rand, GC_vari)
>      Gcoeffs = data.frame(GC_uni)
> 
> ###### Saving to matlab file  
>   writeMat('/home/glaciology1/Documents/Data/SnowDepth/BMS/R2mat.mat',Gcoeffs=Gcoeffs,
+            fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> #  writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/BMS/R2mat.mat',Gcoeffs=Gcoeffs,
> #           fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
> 
> proc.time()
   user  system elapsed 
  0.552   0.024   0.575 
