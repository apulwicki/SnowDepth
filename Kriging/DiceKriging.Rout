
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################################################
> #Dice Kriging
> ############################################################################
> 
> ## Libraries
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> library(DiceKriging)
> library(DiceOptim)
> library(foreach)
> 
> 
> ## Load my data ##
> #residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> residuals = readMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/residuals.mat')
> res = residuals$res
> utm = data.frame(residuals$utm)
> sizexy = residuals$sizexy
> 
> ## Model ##
> m = km(~1,design = utm, response = res, covtype = "matern5_2", nugget.estim = TRUE, multistart = 5, iso = TRUE)

optimisation start
------------------
* estimation method   : MLE 
* optimisation method : BFGS 
* analytical gradient : used
* trend model : ~1
* covariance model : 
  - type :  matern5_2 
  - nugget : unknown homogenous nugget effect 
  - parameters lower bounds :  1e-10 
  - parameters upper bounds :  4916.567 
  - upper bound for alpha   :  1 
  - best initial criterion value(s) :  145.6719 143.6111 141.9524 138.4132 137.1177 

N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -145.67  |proj g|=     0.056431
At iterate     1  f =      -146.04  |proj g|=      0.037507
At iterate     2  f =      -146.06  |proj g|=      0.033584
At iterate     3  f =      -146.06  |proj g|=       0.15278
At iterate     4  f =      -146.06  |proj g|=     0.0061032
At iterate     5  f =      -146.06  |proj g|=     0.0078238

iterations 5
function evaluations 9
segments explored during Cauchy searches 6
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00782381
final function value -146.057

F = -146.057
final  value -146.056990 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -143.61  |proj g|=      0.50794
At iterate     1  f =      -147.46  |proj g|=       0.32861
At iterate     2  f =      -149.04  |proj g|=       0.21619
At iterate     3  f =      -149.43  |proj g|=       0.15277
At iterate     4  f =      -149.43  |proj g|=       0.76556
At iterate     5  f =      -149.43  |proj g|=      0.038069
At iterate     6  f =      -149.43  |proj g|=     0.0053808
At iterate     7  f =      -149.43  |proj g|=     0.0076731
At iterate     8  f =      -149.43  |proj g|=      0.018226
At iterate     9  f =      -149.43  |proj g|=      0.049689
At iterate    10  f =      -149.43  |proj g|=      0.091754
At iterate    11  f =      -149.43  |proj g|=       0.16554
At iterate    12  f =      -149.43  |proj g|=       0.28199
At iterate    13  f =      -149.43  |proj g|=       0.47412
At iterate    14  f =      -149.44  |proj g|=       0.79314
At iterate    15  f =      -149.44  |proj g|=       0.86066
At iterate    16  f =      -149.45  |proj g|=       0.86424
At iterate    17  f =      -149.47  |proj g|=       0.86985
At iterate    18  f =      -149.54  |proj g|=       0.87937
At iterate    19  f =      -150.77  |proj g|=       0.92951
At iterate    20  f =      -150.81  |proj g|=       0.93331
At iterate    21  f =      -151.65  |proj g|=       0.92096
At iterate    22  f =       -152.1  |proj g|=       0.89612
At iterate    23  f =       -152.2  |proj g|=       0.88141
At iterate    24  f =      -152.24  |proj g|=       0.88176
At iterate    25  f =      -152.25  |proj g|=       0.32868
At iterate    26  f =      -152.25  |proj g|=        0.1228
At iterate    27  f =      -152.25  |proj g|=     0.0034398
At iterate    28  f =      -152.25  |proj g|=    1.0005e-05

iterations 28
function evaluations 39
segments explored during Cauchy searches 30
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 1.00053e-05
final function value -152.246

F = -152.246
final  value -152.246214 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -141.95  |proj g|=      0.30704
At iterate     1  f =       -146.8  |proj g|=      0.067386
At iterate     2  f =      -146.91  |proj g|=       0.95516
At iterate     3  f =      -146.92  |proj g|=      0.053749
At iterate     4  f =      -146.93  |proj g|=      0.051242
At iterate     5  f =      -146.93  |proj g|=      0.056853
At iterate     6  f =      -146.93  |proj g|=     0.0059719
At iterate     7  f =      -146.93  |proj g|=      0.017485
At iterate     8  f =      -146.93  |proj g|=       0.17102
At iterate     9  f =      -146.93  |proj g|=       0.36253
At iterate    10  f =      -146.93  |proj g|=       0.71132
At iterate    11  f =      -146.93  |proj g|=       0.95023
At iterate    12  f =      -146.93  |proj g|=       0.95087
At iterate    13  f =      -146.94  |proj g|=       0.95181
At iterate    14  f =      -146.95  |proj g|=       0.95317
At iterate    15  f =      -146.97  |proj g|=       0.95486
At iterate    16  f =      -147.06  |proj g|=       0.95623
At iterate    17  f =      -147.31  |proj g|=       0.95443
At iterate    18  f =      -147.94  |proj g|=       0.94095
At iterate    19  f =      -152.04  |proj g|=       0.90582
At iterate    20  f =      -152.06  |proj g|=       0.90512
At iterate    21  f =      -152.24  |proj g|=      0.064376
At iterate    22  f =      -152.25  |proj g|=      0.081602
At iterate    23  f =      -152.25  |proj g|=      0.021908
At iterate    24  f =      -152.25  |proj g|=     0.0034181
At iterate    25  f =      -152.25  |proj g|=    6.2144e-05

iterations 25
function evaluations 40
segments explored during Cauchy searches 27
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 6.21439e-05
final function value -152.246

F = -152.246
final  value -152.246214 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -138.41  |proj g|=      0.12683
At iterate     1  f =      -142.36  |proj g|=       0.99533
At iterate     2  f =      -142.55  |proj g|=     0.0072816
At iterate     3  f =      -142.55  |proj g|=     0.0071577
At iterate     4  f =      -142.55  |proj g|=       0.37224
At iterate     5  f =      -142.55  |proj g|=      0.007026
At iterate     6  f =      -142.55  |proj g|=     0.0059135

iterations 6
function evaluations 15
segments explored during Cauchy searches 7
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00591351
final function value -142.546

F = -142.546
final  value -142.546399 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -137.12  |proj g|=      0.25758
At iterate     1  f =      -143.24  |proj g|=     0.0094555
At iterate     2  f =      -143.24  |proj g|=     0.0093435
At iterate     3  f =      -143.24  |proj g|=     0.0060316

iterations 3
function evaluations 10
segments explored during Cauchy searches 5
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00603159
final function value -143.242

F = -143.242
final  value -143.241702 
converged

* The 5 best values (multistart) obtained are:
 -146.057 -152.2462 -152.2462 -142.5464 -143.2417 
* The model corresponding to the best one (-152.2462) is stored. 
Warning message:
executing %dopar% sequentially: no parallel backend registered 
>  
>  #plot(m)
>  #m
>  
>  #Return model paramaters
>  maxLL = -m@logLik
>  intercept = m@trend.coef
>  nugget = m@covariance@nugget
>  theta = m@covariance@range.val
>     model = data.frame(intercept, nugget, maxLL, theta)
> 
>  #Cross validation (leave one out)
>  LOO = leaveOneOut.km(m, "SK",trend.reestim = TRUE)
>  
>  
> ## Kriging prediction surface ##
> x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> grid = expand.grid(X1=x, X2 = y)
> pred.m = predict(m,grid,"SK")
> 
> 
> pred = matrix(pred.m$mean, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> lower95 = matrix(pred.m$lower95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> upper95 = matrix(pred.m$upper95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> 
> 
> writeMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/kriging.mat',
+          pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
+          fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> #  writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/kriging.mat',
> #           pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
> #           fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
> ## Install and load rgl package
> #library(rgl)
> 
> ## Plot surface and observations
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean,length(x),length(y)),col="light blue", alpha=0.5)
> 
> ## Plot surface and observations with intervals
> #  rglwidget()
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean, sizexy[1,1], sizexy[1,2]),col="light blue", alpha=0.5)
> #surface3d(x.grid,x.grid, matrix(pred.m$upper95,n.grid,n.grid),col="light blue", alpha=0.25)
> #surface3d(x.grid,x.grid, matrix(pred.m$lower95,n.grid,n.grid),col="light blue", alpha=0.25)
> #rgl.snapshot("filename.png")
> 
> proc.time()
   user  system elapsed 
  1.928   0.032   1.958 
