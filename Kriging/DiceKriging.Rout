
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################################################
> #Dice Kriging
> ############################################################################
> 
> ## Libraries
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> library(DiceKriging)
> library(DiceOptim)
> library(foreach)
> 
> 
> ## Load my data ##
> #residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> residuals = readMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/residuals.mat')
> res = residuals$res
> utm = data.frame(residuals$utm)
> sizexy = residuals$sizexy
> 
> ## Model ##
> m = km(~1,design = utm, response = res, covtype = "matern5_2", nugget.estim = TRUE, multistart = 5, iso = TRUE)

optimisation start
------------------
* estimation method   : MLE 
* optimisation method : BFGS 
* analytical gradient : used
* trend model : ~1
* covariance model : 
  - type :  matern5_2 
  - nugget : unknown homogenous nugget effect 
  - parameters lower bounds :  1e-10 
  - parameters upper bounds :  9181.425 
  - upper bound for alpha   :  1 
  - best initial criterion value(s) :  520.6804 518.334 513.9753 511.4268 510.6285 

N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -520.68  |proj g|=      0.64655
At iterate     1  f =      -524.61  |proj g|=       0.42692
At iterate     2  f =      -524.64  |proj g|=       0.40989
At iterate     3  f =      -524.64  |proj g|=     0.0064894
At iterate     4  f =      -524.64  |proj g|=     0.0010018

iterations 4
function evaluations 6
segments explored during Cauchy searches 5
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00100175
final function value -524.638

F = -524.638
final  value -524.637906 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -518.33  |proj g|=      0.52084
At iterate     1  f =      -522.61  |proj g|=       0.34448
At iterate     2  f =      -523.76  |proj g|=       0.25797
At iterate     3  f =      -523.91  |proj g|=       0.82951
At iterate     4  f =      -524.02  |proj g|=        0.2113
At iterate     5  f =      -524.02  |proj g|=       0.20395
At iterate     6  f =      -524.03  |proj g|=      0.012578
At iterate     7  f =      -524.03  |proj g|=     0.0050195

iterations 7
function evaluations 10
segments explored during Cauchy searches 8
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00501955
final function value -524.025

F = -524.025
final  value -524.025086 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -513.98  |proj g|=       0.7226
At iterate     1  f =      -523.14  |proj g|=       0.47266
At iterate     2  f =      -524.63  |proj g|=       0.35988
At iterate     3  f =      -524.85  |proj g|=       0.70806
At iterate     4  f =      -524.86  |proj g|=       0.11274
At iterate     5  f =      -524.86  |proj g|=     0.0027442
At iterate     6  f =      -524.86  |proj g|=     0.0027432

iterations 6
function evaluations 8
segments explored during Cauchy searches 7
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00274324
final function value -524.856

F = -524.856
final  value -524.856141 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -511.43  |proj g|=      0.79411
At iterate     1  f =      -523.92  |proj g|=       0.51431
At iterate     2  f =      -524.69  |proj g|=       0.45394
At iterate     3  f =      -525.06  |proj g|=       0.37837
At iterate     4  f =      -525.06  |proj g|=     0.0079957
At iterate     5  f =      -525.06  |proj g|=    0.00035381

iterations 5
function evaluations 7
segments explored during Cauchy searches 6
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.000353805
final function value -525.064

F = -525.064
final  value -525.063636 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -510.63  |proj g|=      0.75381
At iterate     1  f =      -521.89  |proj g|=       0.49069
At iterate     2  f =      -524.13  |proj g|=       0.36171
At iterate     3  f =      -524.64  |proj g|=       0.74885
At iterate     4  f =      -524.66  |proj g|=       0.27448
At iterate     5  f =      -524.66  |proj g|=      0.033052
At iterate     6  f =      -524.66  |proj g|=     0.0035913
At iterate     7  f =      -524.67  |proj g|=        0.5707
At iterate     8  f =       -524.7  |proj g|=       0.73551
At iterate     9  f =      -524.79  |proj g|=        0.7296
At iterate    10  f =      -524.93  |proj g|=       0.70149
At iterate    11  f =      -525.02  |proj g|=       0.66123
At iterate    12  f =      -525.06  |proj g|=       0.63882
At iterate    13  f =      -525.07  |proj g|=       0.06675
At iterate    14  f =      -525.07  |proj g|=     0.0010514
At iterate    15  f =      -525.07  |proj g|=    0.00032719

iterations 15
function evaluations 25
segments explored during Cauchy searches 16
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.000327188
final function value -525.067

F = -525.067
final  value -525.066506 
converged

* The 5 best values (multistart) obtained are:
 -524.6379 -524.0251 -524.8561 -525.0636 -525.0665 
* The model corresponding to the best one (-525.0665) is stored. 
Warning message:
executing %dopar% sequentially: no parallel backend registered 
>  
>  #plot(m)
>  #m
>  
>  #Return model paramaters
>  maxLL = -m@logLik
>  intercept = m@trend.coef
>  nugget = m@covariance@nugget
>  theta = m@covariance@range.val
>     model = data.frame(intercept, nugget, maxLL, theta)
> 
>  #Cross validation (leave one out)
>  LOO = leaveOneOut.km(m, "SK",trend.reestim = TRUE)
>  
>  
> ## Kriging prediction surface ##
> x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> grid = expand.grid(X1=x, X2 = y)
> pred.m = predict(m,grid,"SK")
> 
> 
> pred = matrix(pred.m$mean, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> lower95 = matrix(pred.m$lower95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> upper95 = matrix(pred.m$upper95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> 
> 
> writeMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/kriging.mat',
+          pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
+          fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> #  writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/kriging.mat',
> #           pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
> #           fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
> ## Install and load rgl package
> #library(rgl)
> 
> ## Plot surface and observations
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean,length(x),length(y)),col="light blue", alpha=0.5)
> 
> ## Plot surface and observations with intervals
> #  rglwidget()
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean, sizexy[1,1], sizexy[1,2]),col="light blue", alpha=0.5)
> #surface3d(x.grid,x.grid, matrix(pred.m$upper95,n.grid,n.grid),col="light blue", alpha=0.25)
> #surface3d(x.grid,x.grid, matrix(pred.m$lower95,n.grid,n.grid),col="light blue", alpha=0.25)
> #rgl.snapshot("filename.png")
> 
> proc.time()
   user  system elapsed 
 17.688   0.084  17.770 
