
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################################################
> #Dice Kriging
> ############################################################################
> 
> ## Libraries
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> library(DiceKriging)
> library(DiceOptim)
> 
> 
> ## Load my data ##
> #residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> residuals = readMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/residuals.mat')
> res = residuals$res
> utm = data.frame(residuals$utm)
> sizexy = residuals$sizexy
> 
> ## Model ##
> m = km(~1,design = utm, response = res, covtype = "matern5_2", nugget.estim = TRUE)

optimisation start
------------------
* estimation method   : MLE 
* optimisation method : BFGS 
* analytical gradient : used
* trend model : ~1
* covariance model : 
  - type :  matern5_2 
  - nugget : unknown homogenous nugget effect 
  - parameters lower bounds :  1e-10 1e-10 
  - parameters upper bounds :  4636.399 4916.567 
  - upper bound for alpha   :  1 
  - best initial criterion value(s) :  145.9153 

N = 3, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -145.92  |proj g|=      0.94409
At iterate     1  f =      -146.71  |proj g|=       0.27313
At iterate     2  f =      -146.72  |proj g|=       0.27184
At iterate     3  f =      -146.73  |proj g|=        0.2697
At iterate     4  f =      -146.73  |proj g|=       0.26984
At iterate     5  f =      -146.73  |proj g|=       0.27079
At iterate     6  f =      -146.74  |proj g|=       0.27164
At iterate     7  f =      -146.77  |proj g|=       0.27225
At iterate     8  f =      -146.84  |proj g|=       0.27098
At iterate     9  f =         -147  |proj g|=       0.26409
At iterate    10  f =      -147.35  |proj g|=       0.24519
At iterate    11  f =      -148.11  |proj g|=       0.26734
At iterate    12  f =       -150.1  |proj g|=       0.29697
At iterate    13  f =      -153.13  |proj g|=       0.18526
At iterate    14  f =      -154.97  |proj g|=        0.8656
At iterate    15  f =      -155.64  |proj g|=       0.23714
At iterate    16  f =      -155.84  |proj g|=       0.20485
At iterate    17  f =      -155.89  |proj g|=       0.82924
At iterate    18  f =       -155.9  |proj g|=       0.18203
At iterate    19  f =       -155.9  |proj g|=      0.059594
At iterate    20  f =       -155.9  |proj g|=      0.011901
At iterate    21  f =       -155.9  |proj g|=      0.011023
At iterate    22  f =       -155.9  |proj g|=      0.041648
At iterate    23  f =       -155.9  |proj g|=      0.081531
At iterate    24  f =       -155.9  |proj g|=       0.15281
At iterate    25  f =       -155.9  |proj g|=       0.18217
At iterate    26  f =       -155.9  |proj g|=       0.18521
At iterate    27  f =      -155.91  |proj g|=       0.18482
At iterate    28  f =      -155.92  |proj g|=       0.11852
At iterate    29  f =      -155.94  |proj g|=       0.49724
At iterate    30  f =      -156.01  |proj g|=       0.82521
At iterate    31  f =      -156.12  |proj g|=       0.82982
At iterate    32  f =      -156.15  |proj g|=       0.84588
At iterate    33  f =      -156.31  |proj g|=       0.84166
At iterate    34  f =      -156.46  |proj g|=       0.63954
At iterate    35  f =      -156.48  |proj g|=        0.1684
At iterate    36  f =      -156.48  |proj g|=     0.0044644
At iterate    37  f =      -156.48  |proj g|=     0.0008133
At iterate    38  f =      -156.48  |proj g|=     0.0002078

iterations 38
function evaluations 44
segments explored during Cauchy searches 40
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.000207797
final function value -156.482

F = -156.482
final  value -156.481947 
converged
> #plot(m)
> #m
>  #Return model paramaters
>  maxLL = -m@logLik
>  intercept = m@trend.coef
>  nugget = m@covariance@nugget
>  model = data.frame(intercept, nugget, maxLL)
> 
>  #Cross validation (leave one out)
>  LOO = leaveOneOut.km(m, "SK",trend.reestim = TRUE)
>  
>  
> ## Kriging prediction surface ##
> x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> grid = expand.grid(X1=x, X2 = y)
> pred.m = predict(m,grid,"SK")
> 
> 
> pred = matrix(pred.m$mean, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> lower95 = matrix(pred.m$lower95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> upper95 = matrix(pred.m$upper95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> 
> writeMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/kriging.mat',
+          pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
+          fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> #  writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/kriging.mat',
> #           pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
> #           fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
> ## Install and load rgl package
> #library(rgl)
> 
> ## Plot surface and observations
> #plot3d(X[,1],X[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x.grid,x.grid, matrix(pred.m$mean,n.grid,n.grid),col="light blue", alpha=0.5)
> 
> ## Plot surface and observations with intervals
> #  rglwidget()
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean, sizexy[1,1], sizexy[1,2]),col="light blue", alpha=0.5)
> #surface3d(x.grid,x.grid, matrix(pred.m$upper95,n.grid,n.grid),col="light blue", alpha=0.25)
> #surface3d(x.grid,x.grid, matrix(pred.m$lower95,n.grid,n.grid),col="light blue", alpha=0.25)
> #rgl.snapshot("filename.png")
> 
> proc.time()
   user  system elapsed 
  1.500   0.040   1.538 
