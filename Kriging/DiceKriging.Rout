
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################################################
> #Dice Kriging
> ############################################################################
> 
> ## Libraries
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> library(DiceKriging)
> library(DiceOptim)
> library(foreach)
> 
> 
> ## Load my data ##
> #residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> residuals = readMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/residuals.mat')
> res = residuals$res
> utm = data.frame(residuals$utm)
> sizexy = residuals$sizexy
> 
> ## Model ##
> m = km(~1,design = utm, response = res, covtype = "matern5_2", nugget.estim = TRUE, multistart = 5, iso = TRUE)

optimisation start
------------------
* estimation method   : MLE 
* optimisation method : BFGS 
* analytical gradient : used
* trend model : ~1
* covariance model : 
  - type :  matern5_2 
  - nugget : unknown homogenous nugget effect 
  - parameters lower bounds :  1e-10 
  - parameters upper bounds :  9181.425 
  - upper bound for alpha   :  1 
  - best initial criterion value(s) :  523.543 515.6828 513.3758 512.04 507.0671 

N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -523.54  |proj g|=      0.66414
At iterate     1  f =      -533.03  |proj g|=       0.43426
At iterate     2  f =      -540.49  |proj g|=       0.90956
At iterate     3  f =      -540.59  |proj g|=       0.11167
At iterate     4  f =       -540.6  |proj g|=       0.10995
At iterate     5  f =       -540.6  |proj g|=     0.0059966
At iterate     6  f =       -540.6  |proj g|=     0.0040394

iterations 6
function evaluations 9
segments explored during Cauchy searches 7
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00403936
final function value -540.596

F = -540.596
final  value -540.595768 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -515.68  |proj g|=      0.66036
At iterate     1  f =       -524.9  |proj g|=       0.43008
At iterate     2  f =       -538.5  |proj g|=       0.96784
At iterate     3  f =      -538.58  |proj g|=      0.039278
At iterate     4  f =      -538.58  |proj g|=       0.03904
At iterate     5  f =      -538.58  |proj g|=     0.0052414
At iterate     6  f =      -538.58  |proj g|=     0.0052417

iterations 6
function evaluations 13
segments explored during Cauchy searches 8
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00524168
final function value -538.583

F = -538.583
final  value -538.583350 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -513.38  |proj g|=       0.4312
At iterate     1  f =      -530.39  |proj g|=      0.031466
ys=-3.907e+01  -gs= 1.236e+01, BFGS update SKIPPED
At iterate     2  f =      -534.07  |proj g|=     0.0072483
At iterate     3  f =      -534.08  |proj g|=     0.0066488
At iterate     4  f =      -534.08  |proj g|=       0.89617
At iterate     5  f =      -534.08  |proj g|=     0.0065901
At iterate     6  f =      -534.08  |proj g|=      0.004742

iterations 6
function evaluations 17
segments explored during Cauchy searches 9
BFGS updates skipped 1
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00474197
final function value -534.085

F = -534.085
final  value -534.084505 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -512.04  |proj g|=      0.59201
At iterate     1  f =      -519.19  |proj g|=        0.3861
At iterate     2  f =      -535.08  |proj g|=      0.028278
ys=-2.216e+01  -gs= 1.132e+01, BFGS update SKIPPED
At iterate     3  f =      -535.88  |proj g|=      0.018807
At iterate     4  f =      -536.05  |proj g|=       0.98748
At iterate     5  f =      -536.06  |proj g|=      0.014585
At iterate     6  f =      -536.07  |proj g|=      0.013901
At iterate     7  f =      -536.07  |proj g|=       0.24194
At iterate     8  f =      -536.07  |proj g|=     0.0051779
At iterate     9  f =      -536.07  |proj g|=     0.0051778

iterations 9
function evaluations 17
segments explored during Cauchy searches 13
BFGS updates skipped 1
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00517782
final function value -536.071

F = -536.071
final  value -536.071203 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -507.07  |proj g|=      0.76762
At iterate     1  f =      -520.51  |proj g|=       0.49076
At iterate     2  f =      -537.32  |proj g|=       0.98262
At iterate     3  f =      -537.62  |proj g|=      0.039207
At iterate     4  f =      -537.77  |proj g|=      0.034341
At iterate     5  f =      -537.85  |proj g|=        0.0298
At iterate     6  f =      -537.85  |proj g|=       0.97223
At iterate     7  f =      -537.85  |proj g|=      0.028356
At iterate     8  f =      -537.85  |proj g|=     0.0071298
At iterate     9  f =      -537.85  |proj g|=     0.0053153

iterations 9
function evaluations 19
segments explored during Cauchy searches 10
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00531529
final function value -537.855

F = -537.855
final  value -537.854824 
converged

* The 5 best values (multistart) obtained are:
 -540.5958 -538.5834 -534.0845 -536.0712 -537.8548 
* The model corresponding to the best one (-540.5958) is stored. 
Warning message:
executing %dopar% sequentially: no parallel backend registered 
>  
>  #plot(m)
>  #m
>  
>  #Return model paramaters
>  maxLL = -m@logLik
>  intercept = m@trend.coef
>  nugget = m@covariance@nugget
>  theta = m@covariance@range.val
>     model = data.frame(intercept, nugget, maxLL, theta)
> 
>  #Cross validation (leave one out)
>  LOO = leaveOneOut.km(m, "SK",trend.reestim = TRUE)
>  
>  
> ## Kriging prediction surface ##
> x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> grid = expand.grid(X1=x, X2 = y)
> pred.m = predict(m,grid,"SK")
> 
> 
> pred = matrix(pred.m$mean, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> lower95 = matrix(pred.m$lower95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> upper95 = matrix(pred.m$upper95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> 
> 
> writeMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/kriging.mat',
+          pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
+          fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> #  writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/kriging.mat',
> #           pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
> #           fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
> ## Install and load rgl package
> #library(rgl)
> 
> ## Plot surface and observations
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean,length(x),length(y)),col="light blue", alpha=0.5)
> 
> ## Plot surface and observations with intervals
> #  rglwidget()
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean, sizexy[1,1], sizexy[1,2]),col="light blue", alpha=0.5)
> #surface3d(x.grid,x.grid, matrix(pred.m$upper95,n.grid,n.grid),col="light blue", alpha=0.25)
> #surface3d(x.grid,x.grid, matrix(pred.m$lower95,n.grid,n.grid),col="light blue", alpha=0.25)
> #rgl.snapshot("filename.png")
> 
> proc.time()
   user  system elapsed 
 18.516   0.148  18.662 
