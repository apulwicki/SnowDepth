
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################################################
> #Dice Kriging
> ############################################################################
> 
> ## Libraries
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> library(DiceKriging)
> library(DiceOptim)
> 
> 
> ## Load my data ##
> residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> #residuals = readMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/residuals.mat')
> res = residuals$res
> utm = data.frame(residuals$utm)
> sizexy = residuals$sizexy
> 
> ## Model ##
> m = km(~1,design = utm, response = res, covtype = "matern5_2", nugget.estim = TRUE)

optimisation start
------------------
* estimation method   : MLE 
* optimisation method : BFGS 
* analytical gradient : used
* trend model : ~1
* covariance model : 
  - type :  matern5_2 
  - nugget : unknown homogenous nugget effect 
  - parameters lower bounds :  1e-10 1e-10 
  - parameters upper bounds :  5116.404 5146.066 
  - upper bound for alpha   :  1 
  - best initial criterion value(s) :  167.1561 

N = 3, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -167.16  |proj g|=      0.88611
At iterate     1  f =         -179  |proj g|=       0.56631
At iterate     2  f =      -179.74  |proj g|=       0.50105
At iterate     3  f =       -180.2  |proj g|=       0.36903
At iterate     4  f =       -180.2  |proj g|=      0.041374
At iterate     5  f =       -180.2  |proj g|=      0.036284
At iterate     6  f =       -180.2  |proj g|=      0.036277
At iterate     7  f =       -180.2  |proj g|=       0.10433
At iterate     8  f =       -180.2  |proj g|=       0.21165
At iterate     9  f =       -180.2  |proj g|=        0.3923
At iterate    10  f =       -180.2  |proj g|=       0.60756
At iterate    11  f =      -180.21  |proj g|=       0.61232
At iterate    12  f =      -180.22  |proj g|=       0.62001
At iterate    13  f =      -180.26  |proj g|=       0.63245
At iterate    14  f =      -180.36  |proj g|=       0.65252
At iterate    15  f =      -180.64  |proj g|=       0.68455
At iterate    16  f =      -181.36  |proj g|=       0.72648
At iterate    17  f =      -183.31  |proj g|=       0.74139
At iterate    18  f =      -184.18  |proj g|=       0.68056
At iterate    19  f =      -184.83  |proj g|=       0.64201
At iterate    20  f =      -184.85  |proj g|=       0.58674
At iterate    21  f =      -184.85  |proj g|=      0.042854
At iterate    22  f =      -184.85  |proj g|=      0.028967
At iterate    23  f =      -184.85  |proj g|=      0.087663
At iterate    24  f =      -184.85  |proj g|=       0.17973
At iterate    25  f =      -184.85  |proj g|=       0.35819
At iterate    26  f =      -184.85  |proj g|=       0.37659
At iterate    27  f =      -184.86  |proj g|=       0.37921
At iterate    28  f =      -184.86  |proj g|=        0.3834
At iterate    29  f =      -184.88  |proj g|=       0.39004
At iterate    30  f =      -184.92  |proj g|=       0.39915
At iterate    31  f =      -184.99  |proj g|=       0.40654
At iterate    32  f =      -185.03  |proj g|=       0.38961
At iterate    33  f =      -185.06  |proj g|=       0.39753
At iterate    34  f =      -185.11  |proj g|=       0.40396
At iterate    35  f =       -185.4  |proj g|=        0.4198
At iterate    36  f =      -186.63  |proj g|=       0.45753
At iterate    37  f =      -187.15  |proj g|=       0.45731
At iterate    38  f =      -187.17  |proj g|=       0.44299
At iterate    39  f =      -187.76  |proj g|=        0.4258
At iterate    40  f =      -187.94  |proj g|=       0.40704
At iterate    41  f =      -187.98  |proj g|=       0.18059
At iterate    42  f =      -187.99  |proj g|=       0.19043
At iterate    43  f =      -187.99  |proj g|=       0.04734
At iterate    44  f =      -187.99  |proj g|=    0.00048457
At iterate    45  f =      -187.99  |proj g|=    8.5027e-06

iterations 45
function evaluations 55
segments explored during Cauchy searches 46
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 8.50266e-06
final function value -187.989

F = -187.989
final  value -187.989153 
converged
> #plot(m)
> #m
>  #Return model paramaters
>  maxLL = -m@logLik
>  intercept = m@trend.coef
>  nugget = m@covariance@nugget
>  model = data.frame(intercept, nugget, maxLL)
> 
>  #Cross validation (leave one out)
>  LOO = leaveOneOut.km(m, "SK",trend.reestim = TRUE)
>  
>  
> ## Kriging prediction surface ##
> x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> grid = expand.grid(X1=x, X2 = y)
> pred.m = predict(m,grid,"SK")
> 
> 
> pred = matrix(pred.m$mean, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> lower95 = matrix(pred.m$lower95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> upper95 = matrix(pred.m$upper95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> 
> #writeMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/kriging.mat',
> #         pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
> #         fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
>   writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/kriging.mat',
+            pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
+            fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
> ## Install and load rgl package
> #library(rgl)
> 
> ## Plot surface and observations
> #plot3d(X[,1],X[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x.grid,x.grid, matrix(pred.m$mean,n.grid,n.grid),col="light blue", alpha=0.5)
> 
> ## Plot surface and observations with intervals
> #  rglwidget()
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean, sizexy[1,1], sizexy[1,2]),col="light blue", alpha=0.5)
> #surface3d(x.grid,x.grid, matrix(pred.m$upper95,n.grid,n.grid),col="light blue", alpha=0.25)
> #surface3d(x.grid,x.grid, matrix(pred.m$lower95,n.grid,n.grid),col="light blue", alpha=0.25)
> #rgl.snapshot("filename.png")
> 
> proc.time()
   user  system elapsed 
 10.578   2.604  21.801 
