
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################################################
> #Dice Kriging
> ############################################################################
> 
> ## Libraries
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> library(DiceKriging)
> library(DiceOptim)
> library(foreach)
> 
> 
> ## Load my data ##
> #residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> residuals = readMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/residuals.mat')
> res = residuals$res
> utm = data.frame(residuals$utm)
> sizexy = residuals$sizexy
> 
> ## Model ##
> m = km(~1,design = utm, response = res, covtype = "matern5_2", nugget.estim = TRUE, multistart = 5, iso = TRUE)

optimisation start
------------------
* estimation method   : MLE 
* optimisation method : BFGS 
* analytical gradient : used
* trend model : ~1
* covariance model : 
  - type :  matern5_2 
  - nugget : unknown homogenous nugget effect 
  - parameters lower bounds :  1e-10 
  - parameters upper bounds :  9197.05 
  - upper bound for alpha   :  1 
  - best initial criterion value(s) :  577.3706 567.5364 566.1841 561.0043 556.947 

N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -577.37  |proj g|=      0.87707
At iterate     1  f =      -591.84  |proj g|=       0.55954
At iterate     2  f =      -592.22  |proj g|=       0.52574
At iterate     3  f =       -592.9  |proj g|=       0.40388
At iterate     4  f =      -592.91  |proj g|=      0.085903
At iterate     5  f =      -592.91  |proj g|=      0.027116
At iterate     6  f =      -592.91  |proj g|=      0.032466
At iterate     7  f =      -592.91  |proj g|=       0.13802
At iterate     8  f =      -592.91  |proj g|=       0.30592
At iterate     9  f =      -592.91  |proj g|=       0.39434
At iterate    10  f =      -592.92  |proj g|=       0.40012
At iterate    11  f =      -592.93  |proj g|=       0.40953
At iterate    12  f =      -592.97  |proj g|=        0.4249
At iterate    13  f =      -593.07  |proj g|=       0.45071
At iterate    14  f =      -593.35  |proj g|=       0.49516
At iterate    15  f =      -594.11  |proj g|=        0.5745
At iterate    16  f =      -594.88  |proj g|=       0.63711
At iterate    17  f =      -597.37  |proj g|=       0.54572
At iterate    18  f =      -598.29  |proj g|=       0.50505
At iterate    19  f =      -598.58  |proj g|=       0.55461
At iterate    20  f =      -598.62  |proj g|=       0.54783
At iterate    21  f =      -598.63  |proj g|=      0.069548
At iterate    22  f =      -598.65  |proj g|=       0.10315
At iterate    23  f =      -598.65  |proj g|=      0.030646
At iterate    24  f =      -598.65  |proj g|=     0.0037833
At iterate    25  f =      -598.65  |proj g|=    9.2076e-05

iterations 25
function evaluations 31
segments explored during Cauchy searches 27
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 9.20762e-05
final function value -598.655

F = -598.655
final  value -598.654508 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -567.54  |proj g|=      0.77325
At iterate     1  f =      -579.46  |proj g|=        0.5016
At iterate     2  f =      -584.13  |proj g|=        0.3011
At iterate     3  f =      -585.54  |proj g|=       0.20016
At iterate     4  f =      -585.78  |proj g|=       0.15511
At iterate     5  f =      -585.78  |proj g|=        0.4053
At iterate     6  f =      -585.78  |proj g|=      0.012429
At iterate     7  f =      -585.78  |proj g|=     0.0073144

iterations 7
function evaluations 11
segments explored during Cauchy searches 9
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00731437
final function value -585.784

F = -585.784
final  value -585.784187 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -566.18  |proj g|=      0.70206
At iterate     1  f =       -575.5  |proj g|=       0.45781
At iterate     2  f =      -583.73  |proj g|=        0.1149
At iterate     3  f =      -583.91  |proj g|=       0.92347
At iterate     4  f =      -583.93  |proj g|=      0.089823
At iterate     5  f =      -583.94  |proj g|=      0.086065
At iterate     6  f =      -583.94  |proj g|=      0.027466
At iterate     7  f =      -583.94  |proj g|=     0.0075259

iterations 7
function evaluations 10
segments explored during Cauchy searches 9
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00752595
final function value -583.935

F = -583.935
final  value -583.935186 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=         -561  |proj g|=      0.79501
At iterate     1  f =      -574.32  |proj g|=       0.51185
At iterate     2  f =      -580.46  |proj g|=       0.29092
At iterate     3  f =      -582.68  |proj g|=       0.19311
At iterate     4  f =      -583.83  |proj g|=       0.12842
At iterate     5  f =      -584.12  |proj g|=      0.090857
At iterate     6  f =      -584.12  |proj g|=       0.11947
At iterate     7  f =      -584.12  |proj g|=     0.0075243
At iterate     8  f =      -584.12  |proj g|=      0.045007
At iterate     9  f =      -584.12  |proj g|=       0.43458
At iterate    10  f =      -584.12  |proj g|=       0.91102
At iterate    11  f =      -584.13  |proj g|=       0.91238
At iterate    12  f =      -584.13  |proj g|=       0.91432
At iterate    13  f =      -584.15  |proj g|=       0.91708
At iterate    14  f =      -584.21  |proj g|=       0.92037
At iterate    15  f =      -584.36  |proj g|=       0.92277
At iterate    16  f =       -584.8  |proj g|=       0.91798
At iterate    17  f =      -585.58  |proj g|=       0.89205
At iterate    18  f =      -594.12  |proj g|=       0.72264
At iterate    19  f =      -597.13  |proj g|=        0.6408
At iterate    20  f =      -597.86  |proj g|=       0.59909
At iterate    21  f =      -598.62  |proj g|=       0.55364
At iterate    22  f =      -598.65  |proj g|=       0.55004
At iterate    23  f =      -598.65  |proj g|=      0.022415
At iterate    24  f =      -598.65  |proj g|=     0.0004973

iterations 24
function evaluations 45
segments explored during Cauchy searches 27
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.000497298
final function value -598.655

F = -598.655
final  value -598.654508 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -556.95  |proj g|=      0.64568
At iterate     1  f =      -564.56  |proj g|=       0.41848
At iterate     2  f =      -577.29  |proj g|=       0.03123
ys=-1.307e+01  -gs= 1.087e+01, BFGS update SKIPPED
At iterate     3  f =      -577.88  |proj g|=      0.020778
At iterate     4  f =      -578.03  |proj g|=       0.98616
At iterate     5  f =      -578.04  |proj g|=      0.015542
At iterate     6  f =      -578.04  |proj g|=      0.014904
At iterate     7  f =      -578.04  |proj g|=       0.08224
At iterate     8  f =      -578.04  |proj g|=     0.0062904

iterations 8
function evaluations 16
segments explored during Cauchy searches 12
BFGS updates skipped 1
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00629042
final function value -578.041

F = -578.041
final  value -578.041020 
converged

* The 5 best values (multistart) obtained are:
 -598.6545 -585.7842 -583.9352 -598.6545 -578.041 
* The model corresponding to the best one (-598.6545) is stored. 
Warning message:
executing %dopar% sequentially: no parallel backend registered 
>  
>  #plot(m)
>  #m
>  
>  #Return model paramaters
>  maxLL = -m@logLik
>  intercept = m@trend.coef
>  nugget = m@covariance@nugget
>  theta = m@covariance@range.val
>     model = data.frame(intercept, nugget, maxLL, theta)
> 
>  #Cross validation (leave one out)
>  LOO = leaveOneOut.km(m, "SK",trend.reestim = TRUE)
>  
>  
> ## Kriging prediction surface ##
> x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> grid = expand.grid(X1=x, X2 = y)
> pred.m = predict(m,grid,"SK")
> 
> 
> pred = matrix(pred.m$mean, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> lower95 = matrix(pred.m$lower95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> upper95 = matrix(pred.m$upper95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> 
> 
> writeMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/kriging.mat',
+          pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
+          fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> #  writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/kriging.mat',
> #           pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
> #           fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
> ## Install and load rgl package
> #library(rgl)
> 
> ## Plot surface and observations
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean,length(x),length(y)),col="light blue", alpha=0.5)
> 
> ## Plot surface and observations with intervals
> #  rglwidget()
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean, sizexy[1,1], sizexy[1,2]),col="light blue", alpha=0.5)
> #surface3d(x.grid,x.grid, matrix(pred.m$upper95,n.grid,n.grid),col="light blue", alpha=0.25)
> #surface3d(x.grid,x.grid, matrix(pred.m$lower95,n.grid,n.grid),col="light blue", alpha=0.25)
> #rgl.snapshot("filename.png")
> 
> proc.time()
   user  system elapsed 
 22.176   0.184  22.359 
