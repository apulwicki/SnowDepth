
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################################################
> #Dice Kriging
> ############################################################################
> 
> ## Libraries
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> library(DiceKriging)
> library(DiceOptim)
> library(foreach)
> 
> 
> ## Load my data ##
> #residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> residuals = readMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/residuals.mat')
> res = residuals$res
> utm = data.frame(residuals$utm)
> sizexy = residuals$sizexy
> 
> ## Model ##
> m = km(~1,design = utm, response = res, covtype = "matern5_2", nugget.estim = TRUE, multistart = 5, iso = TRUE)

optimisation start
------------------
* estimation method   : MLE 
* optimisation method : BFGS 
* analytical gradient : used
* trend model : ~1
* covariance model : 
  - type :  matern5_2 
  - nugget : unknown homogenous nugget effect 
  - parameters lower bounds :  1e-10 
  - parameters upper bounds :  5767.017 
  - upper bound for alpha   :  1 
  - best initial criterion value(s) :  18.34825 18.31581 18.18281 18.09347 18.08181 

N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -18.348  |proj g|=       0.8615
At iterate     1  f =      -18.614  |proj g|=       0.47057
At iterate     2  f =      -18.679  |proj g|=       0.15918
At iterate     3  f =       -18.68  |proj g|=    0.00098519
At iterate     4  f =       -18.68  |proj g|=    0.00038913
At iterate     5  f =       -18.68  |proj g|=    0.00038912

iterations 5
function evaluations 7
segments explored during Cauchy searches 6
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.000389117
final function value -18.68

F = -18.68
final  value -18.680020 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -18.316  |proj g|=      0.85985
At iterate     1  f =      -18.816  |proj g|=       0.12099
At iterate     2  f =      -18.817  |proj g|=     0.0079662
At iterate     3  f =      -18.817  |proj g|=    5.4716e-05
At iterate     4  f =      -18.817  |proj g|=    2.5514e-05

iterations 4
function evaluations 6
segments explored during Cauchy searches 5
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 2.55141e-05
final function value -18.8167

F = -18.8167
final  value -18.816660 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -18.183  |proj g|=      0.88025
At iterate     1  f =      -18.526  |proj g|=       0.49399
At iterate     2  f =      -18.571  |proj g|=       0.13656
At iterate     3  f =      -18.572  |proj g|=    0.00080018
At iterate     4  f =      -18.572  |proj g|=     7.143e-05

iterations 4
function evaluations 6
segments explored during Cauchy searches 5
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 7.14298e-05
final function value -18.5718

F = -18.5718
final  value -18.571834 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -18.093  |proj g|=      0.82366
At iterate     1  f =       -19.45  |proj g|=      0.001298
At iterate     2  f =      -19.452  |proj g|=     0.0010293
At iterate     3  f =      -19.456  |proj g|=    1.7674e-06
At iterate     4  f =      -19.456  |proj g|=     1.277e-09

iterations 4
function evaluations 10
segments explored during Cauchy searches 5
BFGS updates skipped 0
active bounds at final generalized Cauchy point 1
norm of the final projected gradient 1.27696e-09
final function value -19.456

F = -19.456
final  value -19.455992 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -18.082  |proj g|=      0.90274
At iterate     1  f =       -18.55  |proj g|=       0.50776
At iterate     2  f =      -18.576  |proj g|=       0.11218
At iterate     3  f =      -18.577  |proj g|=     0.0012631
At iterate     4  f =      -18.577  |proj g|=    0.00026126
At iterate     5  f =      -18.577  |proj g|=    0.00026894
At iterate     6  f =      -18.577  |proj g|=     0.0013853
At iterate     7  f =      -18.577  |proj g|=     0.0030348
At iterate     8  f =      -18.577  |proj g|=     0.0058022
At iterate     9  f =      -18.577  |proj g|=      0.010226
At iterate    10  f =      -18.577  |proj g|=      0.017449
At iterate    11  f =      -18.577  |proj g|=      0.029252
At iterate    12  f =      -18.577  |proj g|=      0.049287
At iterate    13  f =      -18.577  |proj g|=      0.084853
At iterate    14  f =      -18.578  |proj g|=       0.15623
At iterate    15  f =      -18.581  |proj g|=       0.34967
At iterate    16  f =      -18.589  |proj g|=       0.60646
At iterate    17  f =      -18.593  |proj g|=       0.60991
At iterate    18  f =      -18.601  |proj g|=       0.61237
At iterate    19  f =      -18.612  |proj g|=       0.60393
At iterate    20  f =      -18.738  |proj g|=       0.45104
At iterate    21  f =       -19.45  |proj g|=     0.0012988
At iterate    22  f =      -19.453  |proj g|=    0.00097936
At iterate    23  f =      -19.456  |proj g|=    8.7313e-08
At iterate    24  f =      -19.456  |proj g|=    5.8078e-11

iterations 24
function evaluations 31
segments explored during Cauchy searches 26
BFGS updates skipped 0
active bounds at final generalized Cauchy point 1
norm of the final projected gradient 5.80775e-11
final function value -19.456

F = -19.456
final  value -19.455992 
converged

* The 5 best values (multistart) obtained are:
 -18.68002 -18.81666 -18.57183 -19.45599 -19.45599 
* The model corresponding to the best one (-19.45599) is stored. 
Warning message:
executing %dopar% sequentially: no parallel backend registered 
>  
>  #plot(m)
>  #m
>  
>  #Return model paramaters
>  maxLL = -m@logLik
>  intercept = m@trend.coef
>  nugget = m@covariance@nugget
>  theta = m@covariance@range.val
>     model = data.frame(intercept, nugget, maxLL, theta)
> 
>  #Cross validation (leave one out)
>  LOO = leaveOneOut.km(m, "SK",trend.reestim = TRUE)
>  
>  
> ## Kriging prediction surface ##
> x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> grid = expand.grid(X1=x, X2 = y)
> pred.m = predict(m,grid,"SK")
> 
> 
> pred = matrix(pred.m$mean, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> lower95 = matrix(pred.m$lower95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> upper95 = matrix(pred.m$upper95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> 
> 
> writeMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/kriging.mat',
+          pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
+          fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> #  writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/kriging.mat',
> #           pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
> #           fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
> ## Install and load rgl package
> #library(rgl)
> 
> ## Plot surface and observations
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean,length(x),length(y)),col="light blue", alpha=0.5)
> 
> ## Plot surface and observations with intervals
> #  rglwidget()
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean, sizexy[1,1], sizexy[1,2]),col="light blue", alpha=0.5)
> #surface3d(x.grid,x.grid, matrix(pred.m$upper95,n.grid,n.grid),col="light blue", alpha=0.25)
> #surface3d(x.grid,x.grid, matrix(pred.m$lower95,n.grid,n.grid),col="light blue", alpha=0.25)
> #rgl.snapshot("filename.png")
> 
> proc.time()
   user  system elapsed 
  1.000   0.008   1.006 
