
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################################################
> #Dice Kriging
> ############################################################################
> 
> ## Libraries
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> library(DiceKriging)
> library(DiceOptim)
> 
> 
> ## Load my data ##
> #residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> residuals = readMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/residuals.mat')
> res = residuals$res
> utm = data.frame(residuals$utm)
> sizexy = residuals$sizexy
> 
> ## Model ##
> m = km(~1,design = utm, response = res, covtype = "matern5_2", nugget.estim = TRUE)

optimisation start
------------------
* estimation method   : MLE 
* optimisation method : BFGS 
* analytical gradient : used
* trend model : ~1
* covariance model : 
  - type :  matern5_2 
  - nugget : unknown homogenous nugget effect 
  - parameters lower bounds :  1e-10 1e-10 
  - parameters upper bounds :  5132.895 5798.822 
  - upper bound for alpha   :  1 
  - best initial criterion value(s) :  105.5075 

N = 3, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -105.51  |proj g|=      0.16042
At iterate     1  f =      -105.93  |proj g|=             1
At iterate     2  f =         -106  |proj g|=      0.069514
At iterate     3  f =      -106.04  |proj g|=       0.04839
At iterate     4  f =      -106.04  |proj g|=       0.12397
At iterate     5  f =      -106.04  |proj g|=     0.0047665
At iterate     6  f =      -106.04  |proj g|=     0.0038926
At iterate     7  f =      -106.04  |proj g|=     0.0038899
At iterate     8  f =      -106.04  |proj g|=      0.011216
At iterate     9  f =      -106.04  |proj g|=      0.022265
At iterate    10  f =      -106.04  |proj g|=      0.041282
At iterate    11  f =      -106.04  |proj g|=      0.071418
At iterate    12  f =      -106.04  |proj g|=       0.12083
At iterate    13  f =      -106.04  |proj g|=       0.20206
At iterate    14  f =      -106.04  |proj g|=       0.33775
At iterate    15  f =      -106.04  |proj g|=       0.56756
At iterate    16  f =      -106.05  |proj g|=       0.96546
At iterate    17  f =      -106.05  |proj g|=       0.96851
At iterate    18  f =      -106.08  |proj g|=       0.97186
At iterate    19  f =      -106.35  |proj g|=       0.97591
At iterate    20  f =      -106.35  |proj g|=       0.97576
At iterate    21  f =      -107.41  |proj g|=       0.90933
At iterate    22  f =      -112.48  |proj g|=       0.52884
At iterate    23  f =      -115.79  |proj g|=       0.27372
At iterate    24  f =      -116.51  |proj g|=       0.20381
At iterate    25  f =      -117.66  |proj g|=      0.098561
At iterate    26  f =      -117.67  |proj g|=     0.0014718
At iterate    27  f =      -117.67  |proj g|=    1.4935e-05
At iterate    28  f =      -117.67  |proj g|=      3.55e-07

iterations 28
function evaluations 39
segments explored during Cauchy searches 33
BFGS updates skipped 0
active bounds at final generalized Cauchy point 1
norm of the final projected gradient 3.55e-07
final function value -117.673

F = -117.673
final  value -117.673472 
converged
> #plot(m)
> #m
>  #Return model paramaters
>  maxLL = -m@logLik
>  intercept = m@trend.coef
>  nugget = m@covariance@nugget
>  model = data.frame(intercept, nugget, maxLL)
> 
>  #Cross validation (leave one out)
>  LOO = leaveOneOut.km(m, "SK",trend.reestim = TRUE)
>  
>  
> ## Kriging prediction surface ##
> x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> grid = expand.grid(X1=x, X2 = y)
> pred.m = predict(m,grid,"SK")
> 
> 
> pred = matrix(pred.m$mean, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> lower95 = matrix(pred.m$lower95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> upper95 = matrix(pred.m$upper95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> 
> writeMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/kriging.mat',
+          pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
+          fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> #  writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/kriging.mat',
> #           pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
> #           fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
> ## Install and load rgl package
> #library(rgl)
> 
> ## Plot surface and observations
> #plot3d(X[,1],X[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x.grid,x.grid, matrix(pred.m$mean,n.grid,n.grid),col="light blue", alpha=0.5)
> 
> ## Plot surface and observations with intervals
> #  rglwidget()
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean, sizexy[1,1], sizexy[1,2]),col="light blue", alpha=0.5)
> #surface3d(x.grid,x.grid, matrix(pred.m$upper95,n.grid,n.grid),col="light blue", alpha=0.25)
> #surface3d(x.grid,x.grid, matrix(pred.m$lower95,n.grid,n.grid),col="light blue", alpha=0.25)
> #rgl.snapshot("filename.png")
> 
> proc.time()
   user  system elapsed 
  1.644   0.048   1.690 
