
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################################################
> #Dice Kriging
> ############################################################################
> 
> ## Libraries
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> library(DiceKriging)
> library(DiceOptim)
> library(foreach)
> 
> 
> # ## Load my data ##
> # residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> # #residuals = readMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/residuals.mat')
> # res = residuals$res
> # utm = data.frame(residuals$utm)
> # sizexy = residuals$sizexy
> # 
> # ## Model ##
> # m = km(y ~ 1, design = utm, response = res, covtype = "matern5_2", nugget.estim = TRUE, multistart = 5, iso = TRUE)
> # 
> # 
> #  #plot(m)
> #  #m
> #  
> #  #Return model paramaters
> #  maxLL = -m@logLik
> #  intercept = m@trend.coef
> #  nugget = m@covariance@nugget
> #  theta = m@covariance@range.val
> #     model = data.frame(intercept, nugget, maxLL, theta)
> # 
> #  #Cross validation (leave one out)
> #  #LOO = leaveOneOut.km(m, "SK",trend.reestim = TRUE)
> #  
> #  
> # ## Kriging prediction surface ##
> # x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> # y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> # grid = expand.grid(X1=x, X2 = y)
> # pred.m = predict(m,grid,"UK", se.compute = TRUE)
> 
> ## UNIVERSAL KRIGING WITH LINEAR TREND
> # Comparing doing estimation and prediction with universal 
> #   kriging with a linear term in both X and Y (named X1 and X2 
> #   in the utm variable)
> #
> # This will likely need even more multistarts because of the 
> #   extra difficulty fitting the coefficients for X1 and X2
> residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> res       = residuals$res
> utm       = data.frame(residuals$utm)
> sizexy    = residuals$sizexy
> 
> m = km(~., design   = utm, 
+        response     = res, 
+        covtype      = "matern5_2",
+        iso          = TRUE, 
+        multistart   = 1,
+        nugget.estim = TRUE)

optimisation start
------------------
* estimation method   : MLE 
* optimisation method : BFGS 
* analytical gradient : used
* trend model : ~X1 + X2
* covariance model : 
  - type :  matern5_2 
  - nugget : unknown homogenous nugget effect 
  - parameters lower bounds :  1e-10 
  - parameters upper bounds :  9197.05 
  - upper bound for alpha   :  1 
  - best initial criterion value(s) :  579.2322 

N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -579.23  |proj g|=      0.87758
At iterate     1  f =      -593.76  |proj g|=         0.563
At iterate     2  f =      -595.04  |proj g|=       0.48598
At iterate     3  f =      -595.66  |proj g|=       0.63958
At iterate     4  f =      -595.71  |proj g|=       0.39231
At iterate     5  f =      -595.71  |proj g|=      0.070072
At iterate     6  f =      -595.71  |proj g|=      0.032348
At iterate     7  f =      -595.71  |proj g|=      0.032334
At iterate     8  f =      -595.71  |proj g|=       0.11067
At iterate     9  f =      -595.71  |proj g|=       0.21886
At iterate    10  f =      -595.71  |proj g|=       0.42261
At iterate    11  f =      -595.71  |proj g|=       0.61858
At iterate    12  f =      -595.72  |proj g|=       0.62158
At iterate    13  f =      -595.73  |proj g|=       0.62613
At iterate    14  f =      -595.75  |proj g|=       0.63276
At iterate    15  f =      -595.82  |proj g|=       0.64119
At iterate    16  f =      -596.01  |proj g|=       0.64802
At iterate    17  f =      -596.53  |proj g|=       0.64027
At iterate    18  f =      -600.21  |proj g|=       0.54739
At iterate    19  f =      -600.27  |proj g|=       0.52613
At iterate    20  f =      -600.27  |proj g|=       0.54185
At iterate    21  f =      -600.27  |proj g|=      0.016684
At iterate    22  f =      -600.27  |proj g|=    0.00013447
At iterate    23  f =      -600.27  |proj g|=    6.2151e-06

iterations 23
function evaluations 34
segments explored during Cauchy searches 24
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 6.21512e-06
final function value -600.27

F = -600.27
final  value -600.270229 
converged
> 
> maxLL     = -m@logLik
> intercept = m@trend.coef
> nugget    = m@covariance@nugget
> theta     = m@covariance@range.val
> model     = data.frame(intercept, nugget, maxLL, theta)
> 
> x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> 
> grid    = expand.grid(X1=x, X2 = y)
> pred.m  = predict(m,grid,"UK", se.compute = TRUE)
> 
> 
> pred = matrix(pred.m$mean, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> lower95 = matrix(pred.m$lower95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> upper95 = matrix(pred.m$upper95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> STD = matrix(pred.m$sd, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> 
> #writeMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/kriging.mat',
> #         pred=pred, lower95=lower95, upper95=upper95, STD = STD, model = model, LOO = LOO,
> #         fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/kriging.mat',
+            pred=pred, lower95=lower95, upper95=upper95, STD = STD, model = model,
+            fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
> ## Install and load rgl package
> #library(rgl)
> 
> ## Plot surface and observations
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean,length(x),length(y)),col="light blue", alpha=0.5)
> #surface3d(x,y, matrix(pred.m$trend,length(x),length(y)),col="dark blue", alpha=0.25)
> 
> ## Plot surface and observations with intervals
> #  rglwidget()
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean, sizexy[1,1], sizexy[1,2]),col="light blue", alpha=0.5)
> #surface3d(x.grid,x.grid, matrix(pred.m$upper95,n.grid,n.grid),col="light blue", alpha=0.25)
> #surface3d(x.grid,x.grid, matrix(pred.m$lower95,n.grid,n.grid),col="light blue", alpha=0.25)
> #rgl.snapshot("filename.png")
> 
> proc.time()
   user  system elapsed 
 17.310   2.651  28.163 
