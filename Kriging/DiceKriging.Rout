
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################################################
> #Dice Kriging
> ############################################################################
> 
> ## Libraries
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> library(DiceKriging)
> library(DiceOptim)
> library(foreach)
> 
> 
> ## Load my data ##
> residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> #residuals = readMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/residuals.mat')
> res = residuals$res
> utm = data.frame(residuals$utm)
> sizexy = residuals$sizexy
> 
> ## Model ##
> m = km(~1, design = utm, response = res, covtype = "matern5_2", nugget.estim = TRUE, multistart = 5, iso = TRUE)

optimisation start
------------------
* estimation method   : MLE 
* optimisation method : BFGS 
* analytical gradient : used
* trend model : ~1
* covariance model : 
  - type :  matern5_2 
  - nugget : unknown homogenous nugget effect 
  - parameters lower bounds :  1e-10 
  - parameters upper bounds :  9181.425 
  - upper bound for alpha   :  1 
  - best initial criterion value(s) :  505.27 480.5821 470.4296 465.1209 464.9368 

N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -505.27  |proj g|=      0.65622
At iterate     1  f =      -505.27  |proj g|=      0.055901
At iterate     2  f =      -505.27  |proj g|=     0.0033331
At iterate     3  f =      -505.27  |proj g|=     0.0033334

iterations 3
function evaluations 7
segments explored during Cauchy searches 4
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.0033334
final function value -505.275

F = -505.275
final  value -505.274788 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -480.58  |proj g|=      0.73243
At iterate     1  f =      -493.36  |proj g|=       0.47436
At iterate     2  f =      -502.78  |proj g|=       0.18564
At iterate     3  f =      -504.26  |proj g|=        0.1234
At iterate     4  f =      -504.67  |proj g|=       0.91802
At iterate     5  f =      -504.67  |proj g|=      0.086696
At iterate     6  f =      -504.67  |proj g|=      0.063628
At iterate     7  f =      -504.67  |proj g|=     0.0043048
At iterate     8  f =      -504.67  |proj g|=     0.0043052

iterations 8
function evaluations 12
segments explored during Cauchy searches 10
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00430516
final function value -504.672

F = -504.672
final  value -504.671807 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -470.43  |proj g|=      0.59188
At iterate     1  f =      -477.64  |proj g|=       0.38387
At iterate     2  f =      -494.51  |proj g|=      0.028046
ys=-4.402e+01  -gs= 1.112e+01, BFGS update SKIPPED
At iterate     3  f =      -498.39  |proj g|=     0.0064908
At iterate     4  f =      -498.41  |proj g|=     0.0059703
At iterate     5  f =      -498.41  |proj g|=       0.92977
At iterate     6  f =      -498.41  |proj g|=     0.0059201
At iterate     7  f =      -498.41  |proj g|=     0.0048061

iterations 7
function evaluations 19
segments explored during Cauchy searches 11
BFGS updates skipped 1
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00480611
final function value -498.409

F = -498.409
final  value -498.408942 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -465.12  |proj g|=      0.62107
At iterate     1  f =      -472.95  |proj g|=        0.3985
At iterate     2  f =      -488.99  |proj g|=      0.029015
ys=-4.494e+01  -gs= 1.112e+01, BFGS update SKIPPED
At iterate     3  f =      -495.92  |proj g|=     0.0051958
ys=-2.117e+00  -gs= 3.916e+00, BFGS update SKIPPED
At iterate     4  f =         -496  |proj g|=     0.0044913
At iterate     5  f =         -496  |proj g|=        0.9975
At iterate     6  f =         -496  |proj g|=     0.0041762
At iterate     7  f =         -496  |proj g|=     0.0041591
At iterate     8  f =         -496  |proj g|=     0.0041581

iterations 8
function evaluations 21
segments explored during Cauchy searches 12
BFGS updates skipped 2
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00415813
final function value -496.004

F = -496.004
final  value -496.004419 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -464.94  |proj g|=      0.44436
At iterate     1  f =      -469.84  |proj g|=       0.28601
At iterate     2  f =      -481.19  |proj g|=      0.020795
ys=-3.824e+01  -gs= 7.501e+00, BFGS update SKIPPED
At iterate     3  f =      -490.88  |proj g|=     0.0038202
ys=-2.609e+01  -gs= 3.455e+00, BFGS update SKIPPED
At iterate     4  f =      -491.13  |proj g|=     0.0028025
At iterate     5  f =      -491.13  |proj g|=     0.0027852
At iterate     6  f =      -491.13  |proj g|=     0.0027852

iterations 6
function evaluations 19
segments explored during Cauchy searches 10
BFGS updates skipped 2
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00278515
final function value -491.126

F = -491.126
final  value -491.125635 
converged

* The 5 best values (multistart) obtained are:
 -505.2748 -504.6718 -498.4089 -496.0044 -491.1256 
* The model corresponding to the best one (-505.2748) is stored. 
Warning message:
executing %dopar% sequentially: no parallel backend registered 
> 
>  #plot(m)
>  #m
>  
>  #Return model paramaters
>  maxLL = -m@logLik
>  intercept = m@trend.coef
>  nugget = m@covariance@nugget
>  theta = m@covariance@range.val
>     model = data.frame(intercept, nugget, maxLL, theta)
> 
>  #Cross validation (leave one out)
>  #LOO = leaveOneOut.km(m, "SK",trend.reestim = TRUE)
>  
>  
> ## Kriging prediction surface ##
> x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> grid = expand.grid(X1=x, X2 = y)
> pred.m = predict(m,grid,"UK", se.compute = TRUE)
> 
> 
> pred = matrix(pred.m$mean, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> lower95 = matrix(pred.m$lower95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> upper95 = matrix(pred.m$upper95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> STD = matrix(pred.m$sd, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> 
> 
> #writeMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/kriging.mat',
> #         pred=pred, lower95=lower95, upper95=upper95, STD = STD, model = model, LOO = LOO,
> #         fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/kriging.mat',
+            pred=pred, lower95=lower95, upper95=upper95, STD = STD, model = model, LOO = LOO,
+            fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
> ## Install and load rgl package
> #library(rgl)
> 
> ## Plot surface and observations
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean,length(x),length(y)),col="light blue", alpha=0.5)
> #surface3d(x,y, matrix(pred.m$trend,length(x),length(y)),col="dark blue", alpha=0.25)
> 
> ## Plot surface and observations with intervals
> #  rglwidget()
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean, sizexy[1,1], sizexy[1,2]),col="light blue", alpha=0.5)
> #surface3d(x.grid,x.grid, matrix(pred.m$upper95,n.grid,n.grid),col="light blue", alpha=0.25)
> #surface3d(x.grid,x.grid, matrix(pred.m$lower95,n.grid,n.grid),col="light blue", alpha=0.25)
> #rgl.snapshot("filename.png")
> 
> proc.time()
   user  system elapsed 
 25.945   4.425  45.108 
