
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################################################
> #Dice Kriging
> ############################################################################
> 
> ## Libraries
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> library(DiceKriging)
> library(DiceOptim)
> library(foreach)
> 
> 
> ## Load my data ##
> #residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> residuals = readMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/residuals.mat')
> res = residuals$res
> utm = data.frame(residuals$utm)
> sizexy = residuals$sizexy
> 
> ## Model ##
> m = km(~1,design = utm, response = res, covtype = "matern5_2", nugget.estim = TRUE, multistart = 5, iso = TRUE)

optimisation start
------------------
* estimation method   : MLE 
* optimisation method : BFGS 
* analytical gradient : used
* trend model : ~1
* covariance model : 
  - type :  matern5_2 
  - nugget : unknown homogenous nugget effect 
  - parameters lower bounds :  1e-10 
  - parameters upper bounds :  8555.612 
  - upper bound for alpha   :  1 
  - best initial criterion value(s) :  456.1086 422.347 415.2037 415.0624 404.4562 

N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -456.11  |proj g|=      0.17404
At iterate     1  f =      -571.88  |proj g|=        1.7556
ys=-7.809e+08  -gs= 7.371e-01, BFGS update SKIPPED
At iterate     2  f =      -1134.5  |proj g|=    4.0848e-14
Bad direction in the line search;
   refresh the lbfgs memory and restart the iteration.
Derivative >= 0, backtracking line search impossible.final  value -1134.487921 
stopped after 2 iterations
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -422.35  |proj g|=     0.086577
At iterate     1  f =      -441.87  |proj g|=       0.01638
ys=-5.375e+01  -gs= 7.419e+00, BFGS update SKIPPED
At iterate     2  f =      -444.83  |proj g|=     0.0082624
At iterate     3  f =      -444.87  |proj g|=     0.0071842
At iterate     4  f =      -444.87  |proj g|=       0.99821
At iterate     5  f =      -444.87  |proj g|=     0.0071024
At iterate     6  f =      -444.87  |proj g|=      0.016416

iterations 6
function evaluations 15
segments explored during Cauchy searches 8
BFGS updates skipped 1
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.0164163
final function value -444.869

F = -444.869
final  value -444.868844 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=       -415.2  |proj g|=      0.99379
At iterate     1  f =      -442.37  |proj g|=       0.47476
At iterate     2  f =      -452.58  |proj g|=       0.30336
At iterate     3  f =      -458.28  |proj g|=       0.15168
At iterate     4  f =      -458.55  |proj g|=       0.12589
At iterate     5  f =      -458.55  |proj g|=       0.72449
At iterate     6  f =      -458.55  |proj g|=      0.021096
At iterate     7  f =      -458.55  |proj g|=     0.0022403

iterations 7
function evaluations 14
segments explored during Cauchy searches 9
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00224032
final function value -458.554

F = -458.554
final  value -458.553780 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -415.06  |proj g|=     0.008721
At iterate     1  f =      -426.84  |proj g|=     0.0078238
ys=-5.320e+01  -gs= 3.748e+00, BFGS update SKIPPED
At iterate     2  f =       -432.7  |proj g|=       0.99995
At iterate     3  f =      -432.76  |proj g|=     0.0041248
At iterate     4  f =      -432.76  |proj g|=     0.0040906
At iterate     5  f =      -432.76  |proj g|=       0.99994
At iterate     6  f =      -432.76  |proj g|=     0.0040766

iterations 6
function evaluations 18
segments explored during Cauchy searches 8
BFGS updates skipped 1
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.00407657
final function value -432.759

F = -432.759
final  value -432.759278 
converged
N = 2, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -404.46  |proj g|=     0.018211
At iterate     1  f =      -413.23  |proj g|=     0.0034692
ys=-4.177e+01  -gs= 2.806e+00, BFGS update SKIPPED
At iterate     2  f =      -422.22  |proj g|=     0.0042142
ys=-3.672e+01  -gs= 3.226e+00, BFGS update SKIPPED
At iterate     3  f =      -425.93  |proj g|=       0.99999
At iterate     4  f =      -426.03  |proj g|=     0.0026717
At iterate     5  f =      -426.03  |proj g|=     0.0026437
At iterate     6  f =      -426.03  |proj g|=       0.99999
At iterate     7  f =      -426.03  |proj g|=     0.0026229
At iterate     8  f =      -426.03  |proj g|=       0.15689

iterations 8
function evaluations 24
segments explored during Cauchy searches 11
BFGS updates skipped 2
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.156891
final function value -426.034

F = -426.034
final  value -426.034273 
converged

* The 5 best values (multistart) obtained are:
 -1134.488 -444.8688 -458.5538 -432.7593 -426.0343 
* The model corresponding to the best one (-1134.488) is stored. 
Warning message:
executing %dopar% sequentially: no parallel backend registered 
>  
>  #plot(m)
>  #m
>  
>  #Return model paramaters
>  maxLL = -m@logLik
>  intercept = m@trend.coef
>  nugget = m@covariance@nugget
>  theta = m@covariance@range.val
>     model = data.frame(intercept, nugget, maxLL, theta)
> 
>  #Cross validation (leave one out)
>  LOO = leaveOneOut.km(m, "SK",trend.reestim = TRUE)
>  
>  
> ## Kriging prediction surface ##
> x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> grid = expand.grid(X1=x, X2 = y)
> pred.m = predict(m,grid,"SK")
> 
> 
> pred = matrix(pred.m$mean, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> lower95 = matrix(pred.m$lower95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> upper95 = matrix(pred.m$upper95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> 
> 
> writeMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/kriging.mat',
+          pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
+          fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> #  writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/kriging.mat',
> #           pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
> #           fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
> ## Install and load rgl package
> #library(rgl)
> 
> ## Plot surface and observations
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean,length(x),length(y)),col="light blue", alpha=0.5)
> 
> ## Plot surface and observations with intervals
> #  rglwidget()
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean, sizexy[1,1], sizexy[1,2]),col="light blue", alpha=0.5)
> #surface3d(x.grid,x.grid, matrix(pred.m$upper95,n.grid,n.grid),col="light blue", alpha=0.25)
> #surface3d(x.grid,x.grid, matrix(pred.m$lower95,n.grid,n.grid),col="light blue", alpha=0.25)
> #rgl.snapshot("filename.png")
> 
> proc.time()
   user  system elapsed 
  6.508   0.052   6.560 
