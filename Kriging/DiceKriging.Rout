
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ############################################################################
> #Dice Kriging
> ############################################################################
> 
> ## Libraries
> library(R.matlab)
R.matlab v3.6.1 (2016-10-19) successfully loaded. See ?R.matlab for help.

Attaching package: ‘R.matlab’

The following objects are masked from ‘package:base’:

    getOption, isOpen

> library(DiceKriging)
> library(DiceOptim)
> 
> 
> ## Load my data ##
> #residuals = readMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/residuals.mat')
> residuals = readMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/residuals.mat')
> res = residuals$res
> utm = data.frame(residuals$utm)
> sizexy = residuals$sizexy
> 
> ## Model ##
> m = km(~1,design = utm, response = res, covtype = "matern5_2", nugget.estim = TRUE)

optimisation start
------------------
* estimation method   : MLE 
* optimisation method : BFGS 
* analytical gradient : used
* trend model : ~1
* covariance model : 
  - type :  matern5_2 
  - nugget : unknown homogenous nugget effect 
  - parameters lower bounds :  1e-10 1e-10 
  - parameters upper bounds :  4687.442 4927.646 
  - upper bound for alpha   :  1 
  - best initial criterion value(s) :  500.8513 

N = 3, M = 5 machine precision = 2.22045e-16
At X0, 0 variables are exactly at the bounds
At iterate     0  f=      -500.85  |proj g|=       0.4422
At iterate     1  f =      -506.46  |proj g|=       0.29174
At iterate     2  f =       -508.6  |proj g|=       0.17299
At iterate     3  f =      -508.62  |proj g|=        0.8535
At iterate     4  f =      -508.64  |proj g|=       0.15853
At iterate     5  f =      -508.64  |proj g|=      0.027328
At iterate     6  f =      -508.64  |proj g|=      0.027336
At iterate     7  f =      -508.64  |proj g|=       0.03239
At iterate     8  f =      -508.64  |proj g|=      0.090325
At iterate     9  f =      -508.64  |proj g|=       0.17767
At iterate    10  f =      -508.64  |proj g|=       0.32343
At iterate    11  f =      -508.64  |proj g|=       0.55781
At iterate    12  f =      -508.64  |proj g|=       0.84512
At iterate    13  f =      -508.64  |proj g|=       0.84685
At iterate    14  f =      -508.65  |proj g|=       0.84971
At iterate    15  f =      -508.67  |proj g|=       0.85441
At iterate    16  f =      -508.71  |proj g|=       0.86207
At iterate    17  f =      -508.84  |proj g|=       0.87403
At iterate    18  f =      -509.18  |proj g|=         0.891
At iterate    19  f =      -510.04  |proj g|=       0.91012
At iterate    20  f =      -511.95  |proj g|=       0.91934
At iterate    21  f =      -512.91  |proj g|=      0.098369
At iterate    22  f =      -512.99  |proj g|=      0.089584
At iterate    23  f =      -513.03  |proj g|=       0.92444
At iterate    24  f =      -513.04  |proj g|=      0.078093
At iterate    25  f =      -513.04  |proj g|=     0.0092421
At iterate    26  f =      -513.04  |proj g|=     0.0040648
At iterate    27  f =      -513.04  |proj g|=      0.012453
At iterate    28  f =      -513.04  |proj g|=     0.0081071
At iterate    29  f =      -513.04  |proj g|=      0.072698
At iterate    30  f =      -513.04  |proj g|=       0.42436
At iterate    31  f =      -513.04  |proj g|=       0.15881
At iterate    32  f =      -513.04  |proj g|=       0.07627
At iterate    33  f =      -513.05  |proj g|=      0.075993
At iterate    34  f =      -513.06  |proj g|=      0.075835
At iterate    35  f =       -513.1  |proj g|=      0.076352
At iterate    36  f =      -513.18  |proj g|=      0.077758
At iterate    37  f =      -513.21  |proj g|=      0.094386
At iterate    38  f =      -513.45  |proj g|=       0.10068
At iterate    39  f =      -516.21  |proj g|=       0.17982
At iterate    40  f =       -516.3  |proj g|=        0.1849
At iterate    41  f =      -520.65  |proj g|=       0.80627
At iterate    42  f =      -521.45  |proj g|=       0.79737
At iterate    43  f =      -522.18  |proj g|=       0.74014
At iterate    44  f =       -522.6  |proj g|=        0.7138
At iterate    45  f =      -522.65  |proj g|=       0.14282
At iterate    46  f =      -522.65  |proj g|=      0.012205
At iterate    47  f =      -522.65  |proj g|=     0.0048798
At iterate    48  f =      -522.65  |proj g|=    0.00048226

iterations 48
function evaluations 69
segments explored during Cauchy searches 49
BFGS updates skipped 0
active bounds at final generalized Cauchy point 0
norm of the final projected gradient 0.000482265
final function value -522.652

F = -522.652
final  value -522.652272 
converged
> #plot(m)
> #m
>  #Return model paramaters
>  maxLL = -m@logLik
>  intercept = m@trend.coef
>  nugget = m@covariance@nugget
>  model = data.frame(intercept, nugget, maxLL)
> 
>  #Cross validation (leave one out)
>  LOO = leaveOneOut.km(m, "SK",trend.reestim = TRUE)
>  
>  
> ## Kriging prediction surface ##
> x = seq(from = 0, to = (sizexy[1,2]-1)*40, by = 40)
> y = seq(from = 0, to = (sizexy[1,1]-1)*40, by = 40)
> grid = expand.grid(X1=x, X2 = y)
> pred.m = predict(m,grid,"SK")
> 
> 
> pred = matrix(pred.m$mean, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> lower95 = matrix(pred.m$lower95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> upper95 = matrix(pred.m$upper95, sizexy[1,1], sizexy[1,2], byrow = TRUE)
> 
> writeMat('/home/glaciology1/Documents/Data/SnowDepth/Kriging/kriging.mat',
+          pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
+          fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> #  writeMat('/Users/Alexandra/Documents/SFU/Data/SnowDepth/Kriging/kriging.mat',
> #           pred=pred, lower95=lower95, upper95=upper95, model = model, LOO = LOO,
> #           fixNames=TRUE, matVersion="5", onWrite=NULL, verbose=FALSE)
> 
> ## Install and load rgl package
> #library(rgl)
> 
> ## Plot surface and observations
> #plot3d(X[,1],X[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x.grid,x.grid, matrix(pred.m$mean,n.grid,n.grid),col="light blue", alpha=0.5)
> 
> ## Plot surface and observations with intervals
> #  rglwidget()
> #plot3d(utm[,1],utm[,2],res, xlim=c(0,3000),ylim=c(0,3000),zlim=0:1)
> #surface3d(x,y, matrix(pred.m$mean, sizexy[1,1], sizexy[1,2]),col="light blue", alpha=0.5)
> #surface3d(x.grid,x.grid, matrix(pred.m$upper95,n.grid,n.grid),col="light blue", alpha=0.25)
> #surface3d(x.grid,x.grid, matrix(pred.m$lower95,n.grid,n.grid),col="light blue", alpha=0.25)
> #rgl.snapshot("filename.png")
> 
> proc.time()
   user  system elapsed 
  8.028   0.036   8.062 
